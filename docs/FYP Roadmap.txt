AI-Based Smart Lawyer — One-Year FYP Detailed Plan (12 Months / 40 Weeks)
🎯 Core Objective

To design and develop a bilingual (English–Urdu) AI-powered civil law assistant capable of:

Answering legal queries with accurate citations linked to authentic sources

Providing judgment and contract summarization

Offering semantic legal search across laws and judgments

Enabling bilingual voice and text interaction

📅 Phase 1: Project Initiation & Planning (Weeks 1–4)

Objective: Establish the project’s foundation, tools, and scope.

Tasks:

Finalize problem statement, objectives, and scope (Civil Law only).

Define all 4 core modules and assign group responsibilities.

Set up environment:

Node.js, React.js, MongoDB, Python

Qdrant Cloud, Hugging Face API, Google Gemini API

GitHub for version control

Create base folder structure:

/frontend  /backend  /data/raw  /data/clean  /scripts


Write initial documentation (README, architecture overview).

Deliverables:

GitHub repo initialized

Environment setup verified

System architecture draft + Gantt chart

Project proposal finalized for supervisor approval

📘 Phase 2: Data Collection (Weeks 5–10)

Objective: Gather a large, authentic corpus of Pakistani civil law data.

Tasks:

Collect from official sources:

Pakistan Code: Civil Procedure Code, Contract Act, Limitation Act, etc.

Provincial Gazettes: Punjab, Sindh, KP, Balochistan.

Judgment Portals: Supreme Court + all High Courts.

Handle both PDF and HTML formats:

Use Cheerio/Puppeteer for HTML scraping.

Use Tesseract OCR for scanned Urdu/English documents.

Use PyMuPDF/pdfminer for digital text extraction.

Maintain metadata log (court, year, case name, file path).

Organize clean directory structure.

Deliverables:

Minimum 200+ documents (laws + judgments) collected

CSV/JSON log of all sources

Sample OCR and parsing tested successfully

🧹 Phase 3: Preprocessing & Metadata Structuring (Weeks 11–14)

Objective: Clean, segment, and structure text for embedding.

Tasks:

Remove unwanted formatting (headers, page numbers, etc.)

Chunk long texts into 300–500 token segments.

Auto-extract metadata using Regex + spaCy:

Court, year, title, section numbers.

Store output as JSON:

{"chunk": "text...", "metadata": {"court":"Supreme Court", "year":2021}}


Validate with manual checks.

Deliverables:

Structured JSON dataset

Preprocessing pipeline automated (Python script)

Verified metadata accuracy ≥90%

🧮 Phase 4: Embedding Generation & Vector Database (Weeks 15–18)

Objective: Convert cleaned text into embeddings for semantic retrieval.

Tasks:

Use Hugging Face paraphrase-multilingual-MiniLM-L12-v2 model.

Generate bilingual embeddings (Urdu + English).

Store in Qdrant vector database along with metadata.

Test retrieval similarity (Top-K search).

Integrate with MongoDB for user logs.

Deliverables:

Vector database operational

Embeddings successfully stored and retrieved

Semantic search demo (via Postman or console)

🤖 Phase 5: RAG Pipeline Development (Weeks 19–24)

Objective: Implement the Retrieval-Augmented Generation (RAG) system.

Tasks:

Build backend (Node.js + Express) APIs:

/ask: user query → embeddings → retrieve chunks → send to Gemini → return response.

Use LangChain or custom pipeline to orchestrate flow.

Append citations (law section, URL, judgment name) to output.

Validate answers for factual accuracy.

Internal testing with sample questions:

“What is the limitation period for filing an appeal?”

“Explain Section 9 of Civil Procedure Code.”

Deliverables:

Fully working RAG backend

API tested in Postman with citations

Logs stored in MongoDB

💻 Phase 6: Frontend Development & Module Integration (Weeks 25–32)

Objective: Build an intuitive web interface and integrate all four core modules.

Modules to Implement:

AI Chatbot (RAG) — bilingual, citation-linked answers.

Judgment Summarization — summarization via Gemini API.

Contract Summarization — file upload → text extraction → summary.

Legal Search — search by keyword, section, year, or court with source links.

Tasks:

Build UI using React + Tailwind CSS.

Integrate filters and chat interface.

Add upload feature for contracts (PyMuPDF backend).

Implement Voice Input/Output using Whisper / gTTS.

Connect frontend ↔ backend via REST APIs.

Add user-friendly display for citations and source URLs.

Deliverables:

Fully functional bilingual web app

Chatbot + summarization working with citations

Voice query demo ready for presentation

🧪 Phase 7: Testing, Evaluation & Optimization (Weeks 33–36)

Objective: Ensure reliability, accuracy, and usability.

Testing Types:

Functional: Frontend + backend + DB + APIs.

Accuracy: Target ≥85% precision/recall in retrieval and summarization.

Performance: Response time < 5 seconds.

User Testing: Law students, faculty, and practitioners.

Deliverables:

Comprehensive testing report

User feedback form summary

Optimization plan (e.g., caching frequent queries)

📑 Phase 8: Documentation, Report & Finalization (Weeks 37–40)

Objective: Prepare all materials for final submission and presentation.

Tasks:

Write detailed final report (Abstract → Methodology → Results → Conclusion).

Create presentation slides and system architecture diagrams.

Record short demo video of the system.

Deploy:

Frontend → Vercel

Backend → Render

DBs → Qdrant Cloud + MongoDB Atlas

Backup all project files and documentation on GitHub.

Deliverables:

Final report (Word + PDF)

Viva-ready presentation slides

Fully deployed Smart Lawyer web app

Demo video + supervisor submission

🧱 Tech Stack Summary
Layer	Tool / Framework	Purpose
Frontend	React + Tailwind	Chat UI, filters, voice I/O
Backend	Node.js + Express	RAG pipeline, APIs
Databases	Qdrant + MongoDB Atlas	Semantic search + metadata
LLM	Google Gemini 2.5 Flash	Answer generation & summarization
Embeddings	Hugging Face MiniLM	Multilingual embeddings
Preprocessing	Python (Tesseract, PyMuPDF, Regex)	OCR + cleaning
Hosting	Vercel + Render	Deployment
Version Control	GitHub	Collaboration
🎓 Expected Outcome

By the end of the FYP, you will deliver a production-ready bilingual legal assistant that:

Understands and responds to Pakistani civil law queries accurately.

Provides authentic citations linked to legal sources.

Summarizes judgments and contracts in plain language.

Supports semantic legal search and voice-based interaction.